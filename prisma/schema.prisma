generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_POSTGRES_PRISMA_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String?               @unique
  name                 String?
  isAdmin              Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  debates              Debate[]
  messages             Message[]
  favoritePhilosophers PhilosopherFavorite[]
  philosophers         Philosopher[]
  sessions             Session[]
  votes                Vote[]

  @@map("users")
}

model PhilosopherFavorite {
  id            String      @id @default(cuid())
  userId        String
  philosopherId String
  createdAt     DateTime    @default(now())
  philosopher   Philosopher @relation(fields: [philosopherId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, philosopherId])
  @@map("philosopher_favorites")
}

model InvitationCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String?
  isActive    Boolean   @default(true)
  maxUses     Int       @default(1)
  currentUses Int       @default(0)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  createdBy   String?
  sessions    Session[]

  @@map("invitation_codes")
}

model Session {
  id               String         @id @default(cuid())
  userId           String
  invitationCodeId String
  token            String         @unique
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  expiresAt        DateTime
  lastAccessAt     DateTime       @default(now())
  invitationCode   InvitationCode @relation(fields: [invitationCodeId], references: [id])
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Philosopher {
  id                  String                         @id @default(cuid())
  name                String                         @unique
  description         String
  philosophicalSchool String
  personalityTraits   String
  coreBeliefs         String
  argumentStyle       String
  questioningApproach String
  isActive            Boolean                        @default(true)
  usageCount          Int                            @default(0)
  isDefault           Boolean                        @default(false)
  isDeletable         Boolean                        @default(true)
  createdBy           String?
  isPublic            Boolean                        @default(false)
  shareableId         String?                        @unique
  photoUrl            String?
  publicDescription   String?
  inspirationSource   String?
  debateMechanics     String                         @default("socratic_dialogue")
  customPrompt        String?
  tags                String?
  rating              Float                          @default(0.0)
  totalRatings        Int                            @default(0)
  createdAt           DateTime                       @default(now())
  updatedAt           DateTime                       @updatedAt
  participations      DebateParticipant[]
  messages            Message[]
  favoritedBy         PhilosopherFavorite[]
  personalityAspects  PhilosopherPersonalityAspect[]
  creator             User?                          @relation(fields: [createdBy], references: [id])
  votes               Vote[]

  @@map("philosophers")
}

model Debate {
  id           String              @id @default(cuid())
  topic        String
  description  String
  status       String              @default("TOPIC_CLARIFICATION")
  currentTurn  String              @default("SOCRATES_QUESTION")
  nextSpeaker  String              @default("PHILOSOPHER")
  currentPhase Int                 @default(1)
  userId       String?
  isPublic     Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  concludedAt  DateTime?
  participants DebateParticipant[]
  user         User?               @relation(fields: [userId], references: [id])
  messages     Message[]

  @@map("debates")
}

model DebateParticipant {
  id            String      @id @default(cuid())
  debateId      String
  philosopherId String
  role          String
  joinedAt      DateTime    @default(now())
  philosopher   Philosopher @relation(fields: [philosopherId], references: [id])
  debate        Debate      @relation(fields: [debateId], references: [id], onDelete: Cascade)

  @@unique([debateId, philosopherId])
  @@map("debate_participants")
}

model Message {
  id            String       @id @default(cuid())
  content       String
  senderType    String
  debateId      String
  philosopherId String?
  userId        String?
  turnNumber    Int
  timestamp     DateTime     @default(now())
  user          User?        @relation(fields: [userId], references: [id])
  philosopher   Philosopher? @relation(fields: [philosopherId], references: [id])
  debate        Debate       @relation(fields: [debateId], references: [id], onDelete: Cascade)
  votes         Vote[]

  @@map("messages")
}

model Vote {
  id          String       @id @default(cuid())
  messageId   String
  voterType   String
  voterId     String
  value       Int
  createdAt   DateTime     @default(now())
  philosopher Philosopher? @relation(fields: [voterId], references: [id], map: "votes_philosopher_fkey")
  user        User?        @relation(fields: [voterId], references: [id], map: "votes_user_fkey")
  message     Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, voterId, voterType])
  @@map("votes")
}

model CustomTone {
  id               String   @id @default(cuid())
  title            String
  userDescription  String   @map("user_description")
  aiInterpretation String   @map("ai_interpretation")
  aiLabel          String   @map("ai_label")
  generatedPrompt  String   @map("generated_prompt")
  isActive         Boolean  @default(false) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  usageCount       Int      @default(0) @map("usage_count")

  @@map("custom_tones")
}

model PhilosopherPersonalityAspect {
  id            String      @id @default(cuid())
  philosopherId String
  aspectName    String
  value         Int
  generatedBy   String      @default("AI")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  philosopher   Philosopher @relation(fields: [philosopherId], references: [id], onDelete: Cascade)

  @@unique([philosopherId, aspectName])
  @@map("philosopher_personality_aspects")
}

model LLMProvider {
  id              String           @id @default(cuid())
  name            String           @unique
  baseUrl         String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  models          LLMModel[]
  configurations  LLMConfiguration[]

  @@map("llm_providers")
}

model LLMModel {
  id               String           @id @default(cuid())
  name             String
  providerId       String
  modelIdentifier  String
  isActive         Boolean          @default(true)
  maxTokens        Int?
  costPer1kTokens  Float?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  provider         LLMProvider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  configurations   LLMConfiguration[]
  interactions     LLMInteraction[]

  @@unique([providerId, modelIdentifier])
  @@map("llm_models")
}

model PromptTemplate {
  id               String           @id @default(cuid())
  name             String           @unique
  description      String?
  template         String
  category         String
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  configurations   LLMConfiguration[]
  interactions     LLMInteraction[]

  @@map("prompt_templates")
}

model LLMInteraction {
  id                String            @id @default(cuid())
  modelId           String
  promptTemplateId  String?
  inputTokens       Int?
  outputTokens      Int?
  totalCost         Float?
  responseTime      Int?
  success           Boolean           @default(true)
  errorMessage      String?
  createdAt         DateTime          @default(now())
  model             LLMModel          @relation(fields: [modelId], references: [id])
  promptTemplate    PromptTemplate?   @relation(fields: [promptTemplateId], references: [id])

  @@map("llm_interactions")
}

model LLMConfiguration {
  id                String          @id @default(cuid())
  name              String          @unique
  providerId        String
  modelId           String
  promptTemplateId  String?
  maxTokens         Int             @default(1000)
  temperature       Float           @default(0.7)
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  provider          LLMProvider     @relation(fields: [providerId], references: [id])
  model             LLMModel        @relation(fields: [modelId], references: [id])
  promptTemplate    PromptTemplate? @relation(fields: [promptTemplateId], references: [id])

  @@map("llm_configurations")
} 