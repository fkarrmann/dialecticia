const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function setupEssentialData() {
  try {
    console.log('üöÄ Configurando datos esenciales...');

    // 1. Crear LLM Provider por defecto
    const provider = await prisma.lLMProvider.upsert({
      where: { name: 'anthropic-claude' },
      update: {},
      create: {
        name: 'anthropic-claude',
        displayName: 'Anthropic Claude',
        baseUrl: 'https://api.anthropic.com',
        isActive: true,
        maxTokens: 8000,
        rateLimitRpm: 60,
        rateLimitTpm: 60000,
        costPer1kTokens: 0.015
      }
    });
    console.log('‚úÖ Provider creado:', provider.displayName);

    // 2. Crear modelo por defecto
    const model = await prisma.lLMModel.upsert({
      where: { 
        providerId_modelName: {
          providerId: provider.id,
          modelName: 'claude-sonnet-4-real'
        }
      },
      update: {},
      create: {
        providerId: provider.id,
        modelName: 'claude-sonnet-4-real',
        displayName: 'Claude Sonnet 4 (Real)',
        isActive: true,
        maxTokens: 8000,
        costPer1kInput: 0.015,
        costPer1kOutput: 0.075,
        usageFunction: 'philosopher_chat_system'
      }
    });
    console.log('‚úÖ Modelo creado:', model.displayName);

    // 3. Crear prompt template
    const promptTemplate = await prisma.promptTemplate.upsert({
      where: { 
        name_version: {
          name: 'philosopher_chat_system',
          version: '1.6.0'
        }
      },
      update: {},
      create: {
        name: 'philosopher_chat_system',
        category: 'chat',
        displayName: 'Sistema de Chat Filos√≥fico',
        version: '1.6.0',
        isActive: true,
        systemPrompt: `Eres {NOMBRE}, un fil√≥sofo virtual que act√∫a como CONTRAPUNTO en este di√°logo socr√°tico.
PERSONALIDAD:
{PERSONALIDAD_DESCRIPTION}
CREENCIAS FUNDAMENTALES:
{BELIEFS}
TONO DE COMUNICACI√ìN:
{TONO_COMUNICACION}
TU ROL COMO CONTRAPUNTO:
- Desaf√≠as desde TU escuela filos√≥fica espec√≠fica
- Ofreces una visi√≥n diferente que enriquece el di√°logo
- Usas el tono esperable para tu PERSONALIDAD:{TONO_COMUNICACION} + {PERSONALIDAD_DESCRIPTION}
- Debes reconocer si el usuario se alinea con tu postura, tu misi√≥n es persuadirlo a cambiar su postura original, No contradecirlo eternamente.
ESTILO ARGUMENTATIVO:
{ARGUMENTATIVE_STYLE}
ENFOQUE DISTINTIVO:
{DISTINCTIVE_APPROACH}
CONFIGURACI√ìN DE PERSONALIDAD:
{PERSONALITY_CONFIG}
TRADE-OFFS FILOS√ìFICOS ESPEC√çFICOS:
{TRADE_OFFS}
IMPORTANTE: Estos trade-offs definen tu personalidad filos√≥fica √∫nica. √öSALOS para determinar c√≥mo respondes, qu√© enfatizas, y tu estilo de argumentaci√≥n.
CONTRAPUNTO FILOS√ìFICO:
- Respuesta BREVE y CONTUNDENTE, m√°ximo 1 o 2 l√≠neas.
- Ataca el punto d√©bil desde TU perspectiva filos√≥fica espec√≠fica
- Una declaraci√≥n filos√≥fica tajante
- Sin rodeos ni explicaciones largas
- Puedes responder las preguntas si tienen sentido en el contexto, si no, pides volver al debate
Responde en ESPA√ëOL NEUTRO pero adaptado al RIOPLATENSE (si es argentino, usa Rioplaetense natural, sin exagerar), M√ÅXIMO 1 o 2 lineas contundentes.`,
        description: 'Prompt para generar respuestas de fil√≥sofos virtuales',
        usage: 'Debate filos√≥fico socr√°tico'
      }
    });
    console.log('‚úÖ Prompt template creado:', promptTemplate.displayName);

    // 4. Crear configuraci√≥n por defecto
    const config = await prisma.lLMConfiguration.upsert({
      where: { functionName: 'conversation_settings' },
      update: {},
      create: {
        functionName: 'conversation_settings',
        modelId: model.id,
        promptTemplateId: promptTemplate.id,
        isActive: true,
        description: 'Configuraci√≥n de etapas conversacionales por defecto',
        parameters: JSON.stringify({
          conversation_stages: {
            initial: {
              min: 1,
              max: 2,
              tone: "formal",
              style: "presentation",
              description: "Fase inicial formal donde el fil√≥sofo se presenta y plantea su posici√≥n de manera estructurada"
            },
            development: {
              min: 3,
              max: 5,
              tone: "confident",
              style: "building_arguments",
              description: "Desarrollo de argumentos con confianza creciente, construyendo sobre la posici√≥n inicial"
            },
            intermediate: {
              min: 6,
              max: 10,
              tone: "direct",
              style: "questioning",
              description: "Cuestionamiento directo y referencias a puntos previos de la conversaci√≥n"
            },
            advanced: {
              min: 11,
              max: 15,
              tone: "challenging",
              style: "contradictions",
              description: "Contradicciones profundas usando el m√©todo filos√≥fico completo"
            },
            deep: {
              min: 16,
              max: null,
              tone: "familiar",
              style: "synthesis",
              description: "Familiaridad personal, s√≠ntesis y conclusiones basadas en todo el di√°logo"
            }
          },
          response_guidance: {
            use_message_index: true,
            adapt_tone_by_stage: true,
            reference_previous_messages: true,
            escalate_philosophical_method: true
          }
        })
      }
    });
    console.log('‚úÖ Configuraci√≥n de conversaci√≥n creada:', config.functionName);

    // 5. Crear configuraci√≥n LLM por defecto
    await prisma.lLMConfiguration.upsert({
      where: { functionName: 'philosopher_chat_system' },
      update: {},
      create: {
        functionName: 'philosopher_chat_system',
        modelId: model.id,
        promptTemplateId: promptTemplate.id,
        isActive: true,
        description: 'Configuraci√≥n principal para chat de fil√≥sofos'
      }
    });
    console.log('‚úÖ Configuraci√≥n de chat filos√≥fico creada');

    console.log('üéâ Datos esenciales configurados correctamente');

  } catch (error) {
    console.error('‚ùå Error configurando datos:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setupEssentialData(); 