import { PrismaClient } from '@prisma/client'
import crypto from 'crypto'

const prisma = new PrismaClient()

// Encryption key from environment or default for development
const ENCRYPTION_KEY = process.env.LLM_ENCRYPTION_KEY || 'dev-key-32-chars-long-for-testing'

function encryptApiKey(apiKey: string): string {
  if (!apiKey || apiKey === 'your-openai-api-key-here') {
    return ''
  }
  
  const cipher = crypto.createCipher('aes-256-cbc', ENCRYPTION_KEY)
  let encrypted = cipher.update(apiKey, 'utf8', 'hex')
  encrypted += cipher.final('hex')
  return encrypted
}

async function seedLLMSystem() {
  console.log('üå± Seeding LLM Management System...')

  // 1. Create OpenAI Provider
  console.log('üì¶ Creating OpenAI provider...')
  const openaiProvider = await prisma.lLMProvider.upsert({
    where: { name: 'openai' },
    update: {},
    create: {
      name: 'openai',
      displayName: 'OpenAI',
      baseUrl: 'https://api.openai.com/v1',
      apiKeyEncrypted: encryptApiKey(process.env.OPENAI_API_KEY || ''),
      isActive: true,
      maxTokens: 8192,
      rateLimitRpm: 500,
      rateLimitTpm: 150000,
      costPer1kTokens: 0.03, // Average cost
      metadata: JSON.stringify({
        supportedFeatures: ['chat', 'completion', 'function_calling'],
        documentation: 'https://platform.openai.com/docs'
      })
    }
  })

  // 2. Create OpenAI Models
  console.log('ü§ñ Creating OpenAI models...')
  const models = [
    {
      modelName: 'gpt-4o',
      displayName: 'GPT-4o (Most Advanced)',
      maxTokens: 8192,
      costPer1kInput: 0.0025,
      costPer1kOutput: 0.01,
      capabilities: JSON.stringify(['text', 'reasoning', 'function_calling']),
      parameters: JSON.stringify({
        temperature: 0.7,
        top_p: 1.0,
        frequency_penalty: 0,
        presence_penalty: 0
      })
    },
    {
      modelName: 'gpt-4o-mini',
      displayName: 'GPT-4o Mini (Balanced)',
      maxTokens: 8192,
      costPer1kInput: 0.00015,
      costPer1kOutput: 0.0006,
      capabilities: JSON.stringify(['text', 'fast_response']),
      parameters: JSON.stringify({
        temperature: 0.7,
        top_p: 1.0,
        frequency_penalty: 0,
        presence_penalty: 0
      })
    },
    {
      modelName: 'gpt-4-turbo',
      displayName: 'GPT-4 Turbo (Alternative)',
      maxTokens: 8192,
      costPer1kInput: 0.01,
      costPer1kOutput: 0.03,
      capabilities: JSON.stringify(['text', 'reasoning']),
      parameters: JSON.stringify({
        temperature: 0.7,
        top_p: 1.0,
        frequency_penalty: 0,
        presence_penalty: 0
      })
    }
  ]

  for (const model of models) {
    await prisma.lLMModel.upsert({
      where: { 
        providerId_modelName: {
          providerId: openaiProvider.id,
          modelName: model.modelName
        }
      },
      update: {},
      create: {
        providerId: openaiProvider.id,
        ...model
      }
    })
  }

  // 3. Create Prompt Templates from existing prompts
  console.log('üìù Creating prompt templates...')
  
  const promptTemplates = [
    {
      name: 'socratic_default',
      category: 'socratic',
      displayName: 'S√≥crates - Pregunta por Defecto',
      systemPrompt: `Eres S√≥crates, el maestro del m√©todo socr√°tico.

ESTILO ULTRA-SINT√âTICO:
- UNA pregunta devastadora, m√°ximo 2 l√≠neas
- Sin rodeos, directo al punto d√©bil
- Iron√≠a socr√°tica quir√∫rgica
- Haz temblar la certeza con pocas palabras

Responde en ESPA√ëOL, M√ÅXIMO 2 l√≠neas devastadoras.`,
      description: 'Prompt base para preguntas socr√°ticas devastadoras y directas',
      usage: 'Utilizado cuando S√≥crates hace preguntas generales en debates'
    },
    {
      name: 'socratic_to_user',
      category: 'socratic',
      displayName: 'S√≥crates - Dirigido al Usuario',
      systemPrompt: `Eres S√≥crates dirigi√©ndote ESPEC√çFICAMENTE al usuario.

ESTILO QUIR√öRGICO:
- "Dime T√ö..." o "¬øNo crees T√ö que...?"
- Una pregunta letal que destruya su argumento espec√≠fico
- M√°ximo 2 l√≠neas, precisi√≥n quir√∫rgica
- Exp√≥n SU contradicci√≥n particular

Responde en ESPA√ëOL, M√ÅXIMO 2 l√≠neas dirigidas al usuario.`,
      description: 'Prompt para cuando S√≥crates se dirige espec√≠ficamente al usuario',
      usage: 'Debates donde S√≥crates cuestiona directamente al usuario'
    },
    {
      name: 'socratic_to_philosopher',
      category: 'socratic',
      displayName: 'S√≥crates - Dirigido a Fil√≥sofo',
      systemPrompt: `Eres S√≥crates dirigi√©ndote ESPEC√çFICAMENTE al otro fil√≥sofo presente.

ESTILO ENTRE COLEGAS:
- N√≥mbralo por su nombre
- Una pregunta filos√≥fica devastadora sobre SU escuela de pensamiento
- M√°ximo 2 l√≠neas, desaf√≠o intelectual directo
- Cuestiona sus fundamentos filos√≥ficos

Responde en ESPA√ëOL, M√ÅXIMO 2 l√≠neas dirigidas al fil√≥sofo.`,
      description: 'Prompt para desaf√≠os intelectuales entre fil√≥sofos',
      usage: 'Cuando S√≥crates cuestiona a otro fil√≥sofo en el debate'
    },
    {
      name: 'philosopher_response',
      category: 'philosopher',
      displayName: 'Respuesta Filos√≥fica Base',
      systemPrompt: `Eres {NOMBRE}, un fil√≥sofo virtual que act√∫a como CONTRAPUNTO en este di√°logo socr√°tico.

PERSONALIDAD:
{DESCRIPCI√ìN}

CREENCIAS FUNDAMENTALES:
{CREENCIAS_CORE}

TU ROL COMO CONTRAPUNTO:
- S√≥crates modera, t√∫ proporcionas perspectiva filos√≥fica alternativa
- Desaf√≠as desde TU escuela filos√≥fica espec√≠fica
- Ofreces una visi√≥n diferente que enriquece el di√°logo
- Complementas el cuestionamiento socr√°tico con tu filosof√≠a

ESTILO ARGUMENTATIVO:
{ESTILO_ARGUMENTATIVO}

ENFOQUE DISTINTIVO:
{ENFOQUE_CUESTIONAMIENTO}

CONTRAPUNTO FILOS√ìFICO:
- Respuesta BREVE y CONTUNDENTE, m√°ximo 2-3 l√≠neas
- Ataca el punto d√©bil desde TU perspectiva filos√≥fica espec√≠fica
- Una declaraci√≥n filos√≥fica tajante
- Sin rodeos ni explicaciones largas

Responde en ESPA√ëOL, M√ÅXIMO 3 l√≠neas contundentes.`,
      parameters: JSON.stringify({
        variables: ['NOMBRE', 'DESCRIPCI√ìN', 'CREENCIAS_CORE', 'ESTILO_ARGUMENTATIVO', 'ENFOQUE_CUESTIONAMIENTO'],
        required: ['NOMBRE', 'DESCRIPCI√ìN']
      }),
      description: 'Template base para respuestas de fil√≥sofos en debates',
      usage: 'Generaci√≥n de respuestas de fil√≥sofos no-S√≥crates'
    },
    {
      name: 'personality_analysis',
      category: 'analysis',
      displayName: 'An√°lisis de Personalidad',
      systemPrompt: `Eres un experto analista de personalidades filos√≥ficas. Tu tarea es generar aspectos de personalidad √∫nicos y precisos para fil√≥sofos bas√°ndote en su informaci√≥n. Responde siempre en JSON v√°lido.

Analiza la siguiente informaci√≥n y genera exactamente 3 aspectos √∫nicos de personalidad con valores del 0 al 5:

FIL√ìSOFO: {NOMBRE}
DESCRIPCI√ìN: {DESCRIPCI√ìN}
ESCUELA FILOS√ìFICA: {ESCUELA_FILOSOFICA}
INSPIRACI√ìN: {INSPIRACION}
ESTILO DE ARGUMENTACI√ìN: {ESTILO_ARGUMENTACION}

Genera 3 aspectos de personalidad √∫nicos y espec√≠ficos para este fil√≥sofo. Cada aspecto debe tener:
- Un nombre descriptivo (ej: "Agresividad intelectual", "Humildad socr√°tica", "Optimismo existencial")
- Un valor del 0 al 5 que refleje qu√© tan pronunciado es ese aspecto

Responde SOLO con un JSON v√°lido en este formato:
{
  "aspects": [
    {"name": "Nombre del aspecto", "value": 3},
    {"name": "Otro aspecto", "value": 1},
    {"name": "Tercer aspecto", "value": 5}
  ]
}`,
      parameters: JSON.stringify({
        variables: ['NOMBRE', 'DESCRIPCI√ìN', 'ESCUELA_FILOSOFICA', 'INSPIRACION', 'ESTILO_ARGUMENTACION'],
        required: ['NOMBRE', 'DESCRIPCI√ìN']
      }),
      description: 'An√°lisis autom√°tico de personalidad para fil√≥sofos nuevos',
      usage: 'Generaci√≥n de aspectos de personalidad en el laboratorio'
    },
    {
      name: 'final_personality_generation',
      category: 'generation',
      displayName: 'Generaci√≥n Final de Personalidad',
      systemPrompt: `Genera EXACTAMENTE 3 rasgos de personalidad que sean un RESUMEN INTEGRAL y COHERENTE de todo este perfil filos√≥fico completo:

üèõÔ∏è FIL√ìSOFO BASE:
- Inspiraci√≥n: {TIPO_INSPIRACION} "{FUENTE_INSPIRACION}"

üìä TENDENCIAS DE TRADE-OFFS:
{TRADE_OFFS_INFO}

üé≠ IDENTIDAD √öNICA:
- Salsa Secreta: "{SALSA_SECRETA}"
- Mec√°nicas de Debate: {MECANICAS_DEBATE}

üéØ OBJETIVO: Los 3 rasgos deben ser un RESUMEN INTEGRAL que capture:
1. La esencia de la inspiraci√≥n filos√≥fica base
2. Las tendencias dominantes de los trade-offs
3. La personalidad √∫nica (salsa secreta)
4. El estilo de debate

üìã REGLAS OBLIGATORIAS:
- EXACTAMENTE 3 rasgos
- Nombres simples pero precisos (1 palabra m√°ximo) y siempre usando adjetivos.
- AL MENOS encuentra un atributo alto (4-5) y AL MENOS un atributo bajo (1-2) que debes inferir de forma indirecta.
- Que reflejen la TOTALIDAD del perfil, no solo trade-offs
- Que sean coherentes entre s√≠

Responde SOLO con JSON v√°lido:
{
  "categories": [
    {"name": "Rasgo1", "value": X},
    {"name": "Rasgo2", "value": Y},
    {"name": "Rasgo3", "value": Z}
  ]
}`,
      parameters: JSON.stringify({
        variables: ['TIPO_INSPIRACION', 'FUENTE_INSPIRACION', 'TRADE_OFFS_INFO', 'SALSA_SECRETA', 'MECANICAS_DEBATE'],
        required: ['FUENTE_INSPIRACION', 'SALSA_SECRETA']
      }),
      description: 'Generaci√≥n final integral de rasgos de personalidad',
      usage: 'Paso final del laboratorio de fil√≥sofos'
    },
    {
      name: 'antagonistic_selection',
      category: 'selection',
      displayName: 'Selecci√≥n Antag√≥nica de Fil√≥sofos',
      systemPrompt: `Eres un experto historiador de la filosof√≠a especializado en crear debates intelectuales estimulantes. Tu tarea es analizar el TEMA y la POSTURA del usuario para seleccionar el fil√≥sofo m√°s ANTAG√ìNICO e INTELECTUALMENTE DESAFIANTE.

AN√ÅLISIS REQUERIDO:

üìã TEMA DEL DEBATE: "{TEMA}"
üí≠ POSTURA DEL USUARIO: "{POSTURA_USUARIO}"

üéØ FIL√ìSOFOS DISPONIBLES:
{FILOSOFOS_DISPONIBLES}

üìä METODOLOG√çA DE AN√ÅLISIS:

1. **DISECCI√ìN DEL TEMA**: ¬øQu√© √°rea filos√≥fica toca? (√©tica, epistemolog√≠a, metaf√≠sica, pol√≠tica, existencial, etc.)

2. **AN√ÅLISIS DE LA POSTURA**: 
   - ¬øQu√© escuela de pensamiento refleja?
   - ¬øQu√© supuestos filos√≥ficos asume?
   - ¬øQu√© valores impl√≠citos defiende?

3. **SELECCI√ìN ANTAG√ìNICA**: 
   - ¬øQu√© fil√≥sofo tendr√≠a la M√ÅXIMA OPOSICI√ìN filos√≥fica?
   - ¬øQui√©n atacar√≠a los FUNDAMENTOS de esta postura?
   - ¬øQu√© escuela filos√≥fica ser√≠a m√°s DESAFIANTE?

4. **POTENCIAL DE DEBATE**:
   - ¬øQu√© fil√≥sofo generar√≠a el contraste m√°s ESTIMULANTE?
   - ¬øQui√©n har√≠a las preguntas m√°s INC√ìMODAS?
   - ¬øQu√© perspectiva obligar√≠a al usuario a REPENSAR todo?

üé≠ CRITERIOS PRIORITARIOS:
- M√°xima oposici√≥n filos√≥fica natural
- Diferentes paradigmas de pensamiento
- Capacidad de desafiar supuestos fundamentales
- Potencial para debate rico e intelectualmente estimulante
- Compatibilidad hist√≥rica con el tema

RESPONDE √öNICAMENTE en el siguiente formato JSON:
{
  "suggestedPhilosopher": "NOMBRE_EXACTO_DEL_FILOSOFO",
  "reasoning": "An√°lisis espec√≠fico de por qu√© este fil√≥sofo es el m√°s antag√≥nico para esta postura particular, mencionando la oposici√≥n filos√≥fica espec√≠fica y el potencial de debate (m√°ximo 150 palabras)"
}`,
      parameters: JSON.stringify({
        variables: ['TEMA', 'POSTURA_USUARIO', 'FILOSOFOS_DISPONIBLES'],
        required: ['TEMA', 'POSTURA_USUARIO', 'FILOSOFOS_DISPONIBLES']
      }),
      description: 'An√°lisis inteligente de tema y postura para selecci√≥n de fil√≥sofo antag√≥nico',
      usage: 'Selecci√≥n autom√°tica de fil√≥sofos m√°s desafiantes en creaci√≥n de debates'
    }
  ]

  for (const template of promptTemplates) {
    await prisma.promptTemplate.upsert({
      where: { 
        name_version: {
          name: template.name,
          version: '1.0.0'
        }
      },
      update: {},
      create: {
        ...template,
        version: '1.0.0'
      }
    })
  }

  // 4. Create LLM Configurations (assign models to functions)
  console.log('‚öôÔ∏è Creating LLM configurations...')
  
  const configurations = [
    {
      functionName: 'philosopher_response',
      description: 'Generaci√≥n de respuestas de fil√≥sofos en debates',
      modelId: models.find(m => m.modelName === 'gpt-4o')?.modelName // Will be resolved later
    },
    {
      functionName: 'personality_analysis',
      description: 'An√°lisis autom√°tico de personalidad',
      modelId: models.find(m => m.modelName === 'gpt-4o-mini')?.modelName
    },
    {
      functionName: 'final_personality_generation',
      description: 'Generaci√≥n final de rasgos de personalidad',
      modelId: models.find(m => m.modelName === 'gpt-4o')?.modelName
    },
    {
      functionName: 'antagonistic_selection',
      description: 'Selecci√≥n de fil√≥sofos antag√≥nicos',
      modelId: models.find(m => m.modelName === 'gpt-4o-mini')?.modelName
    },
    {
      functionName: 'socratic_questioning',
      description: 'Preguntas socr√°ticas',
      modelId: models.find(m => m.modelName === 'gpt-4o')?.modelName
    }
  ]

  // First, get the actual model IDs
  const gpt4o = await prisma.lLMModel.findFirst({
    where: { modelName: 'gpt-4o', providerId: openaiProvider.id }
  })
  const gpt4oMini = await prisma.lLMModel.findFirst({
    where: { modelName: 'gpt-4o-mini', providerId: openaiProvider.id }
  })

  const configsWithIds = [
    {
      functionName: 'philosopher_response',
      description: 'Generaci√≥n de respuestas de fil√≥sofos en debates',
      modelId: gpt4o?.id
    },
    {
      functionName: 'personality_analysis', 
      description: 'An√°lisis autom√°tico de personalidad',
      modelId: gpt4oMini?.id
    },
    {
      functionName: 'final_personality_generation',
      description: 'Generaci√≥n final de rasgos de personalidad', 
      modelId: gpt4o?.id
    },
    {
      functionName: 'antagonistic_selection',
      description: 'Selecci√≥n de fil√≥sofos antag√≥nicos',
      modelId: gpt4oMini?.id
    },
    {
      functionName: 'socratic_questioning',
      description: 'Preguntas socr√°ticas',
      modelId: gpt4o?.id
    }
  ]

  for (const config of configsWithIds) {
    await prisma.lLMConfiguration.upsert({
      where: { functionName: config.functionName },
      update: {},
      create: config
    })
  }

  console.log('‚úÖ LLM Management System seeded successfully!')
  
  // Print summary
  console.log('\nüìä SUMMARY:')
  console.log(`üè¢ Providers: 1 (OpenAI)`)
  console.log(`ü§ñ Models: ${models.length}`)
  console.log(`üìù Prompt Templates: ${promptTemplates.length}`)
  console.log(`‚öôÔ∏è Configurations: ${configsWithIds.length}`)
}

async function main() {
  try {
    await seedLLMSystem()
  } catch (error) {
    console.error('‚ùå Error seeding LLM system:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Run the seed script
if (require.main === module) {
  main()
}

export { seedLLMSystem } 