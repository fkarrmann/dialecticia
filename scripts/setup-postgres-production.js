const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
});

async function setupProductionData() {
  try {
    console.log('üöÄ Configurando datos espec√≠ficos de producci√≥n...');

    // 1. Crear c√≥digos de invitaci√≥n para producci√≥n
    console.log('\nüé´ Creando c√≥digos de invitaci√≥n...');
    
    const invitationCodes = [
      {
        code: 'DIALECTICIA-LAUNCH-2024',
        description: 'C√≥digo de lanzamiento principal',
        maxUses: 100,
        expiresAt: new Date('2025-12-31')
      },
      {
        code: 'ADMIN-ACCESS-FEDERICO',
        description: 'Acceso especial para administrador',
        maxUses: 5,
        expiresAt: new Date('2025-12-31')
      },
      {
        code: 'BETA-TESTERS-2024',
        description: 'Acceso para beta testers',
        maxUses: 50,
        expiresAt: new Date('2025-06-30')
      }
    ];

    for (const codeData of invitationCodes) {
      const code = await prisma.invitationCode.upsert({
        where: { code: codeData.code },
        update: {},
        create: codeData
      });
      console.log(`‚úÖ C√≥digo creado: ${code.code} (${code.maxUses} usos)`);
    }

    // 2. Verificar que el usuario admin existe
    console.log('\nüë§ Verificando usuario administrador...');
    const adminUser = await prisma.user.findUnique({
      where: { email: 'fkarrmann@gmail.com' }
    });

    if (adminUser) {
      console.log(`‚úÖ Usuario admin confirmado: ${adminUser.name}`);
    } else {
      console.log('‚ö†Ô∏è Usuario admin no encontrado. Cre√°ndolo...');
      await prisma.user.create({
        data: {
          email: 'fkarrmann@gmail.com',
          name: 'Federico Karrmann',
          isAdmin: true
        }
      });
      console.log('‚úÖ Usuario admin creado');
    }

    // 3. Verificar configuraci√≥n LLM
    console.log('\nü§ñ Verificando configuraci√≥n LLM...');
    const llmProviders = await prisma.lLMProvider.count();
    const llmModels = await prisma.lLMModel.count();
    const promptTemplates = await prisma.promptTemplate.count();
    const configurations = await prisma.lLMConfiguration.count();

    console.log(`üìä Configuraci√≥n LLM:
       - Proveedores: ${llmProviders}
       - Modelos: ${llmModels}  
       - Prompt Templates: ${promptTemplates}
       - Configuraciones: ${configurations}`);

    if (llmProviders === 0 || llmModels === 0 || promptTemplates === 0) {
      console.log('‚ö†Ô∏è Faltan datos LLM cr√≠ticos. Ejecutar migraci√≥n primero.');
    } else {
      console.log('‚úÖ Configuraci√≥n LLM completa');
    }

    // 4. Verificar fil√≥sofos
    console.log('\nüèõÔ∏è Verificando fil√≥sofos...');
    const philosophersCount = await prisma.philosopher.count();
    const activePhilosophers = await prisma.philosopher.count({
      where: { isActive: true }
    });

    console.log(`üìä Fil√≥sofos: ${philosophersCount} total, ${activePhilosophers} activos`);

    if (philosophersCount === 0) {
      console.log('‚ö†Ô∏è No hay fil√≥sofos. Ejecutar migraci√≥n primero.');
    } else {
      console.log('‚úÖ Fil√≥sofos disponibles');
    }

    console.log('\nüéâ Configuraci√≥n de producci√≥n completada!');
    console.log('\nüåê Tu aplicaci√≥n est√° lista para:\n');
    console.log('   üì± Usuarios con c√≥digos de invitaci√≥n');
    console.log('   üèõÔ∏è Debates con fil√≥sofos virtuales');
    console.log('   ü§ñ Sistema LLM completamente configurado');
    console.log('   üë®‚Äçüíª Panel de administraci√≥n funcional');
    console.log('\nüîó Accede con: https://dialecticia.vercel.app');

  } catch (error) {
    console.error('‚ùå Error en configuraci√≥n de producci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setupProductionData(); 