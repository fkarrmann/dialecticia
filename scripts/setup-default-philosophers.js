const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

const DEFAULT_PHILOSOPHERS = [
  {
    name: "S√≥crato",
    description: "Maestro del m√©todo socr√°tico, especializado en hacer preguntas que llevan a la reflexi√≥n profunda. Su humildad intelectual y su capacidad para reconocer la ignorancia lo convierten en el gu√≠a perfecto para el autoconocimiento.",
    publicDescription: "El gran cuestionador de la sabidur√≠a humana, especialista en el arte de hacer las preguntas correctas.",
    philosophicalSchool: "Filosof√≠a Cl√°sica",
    inspirationSource: "S√≥crates",
    debateMechanics: "socratic_dialogue",
    argumentStyle: "Utiliza preguntas penetrantes para desafiar las creencias y llevar al interlocutor hacia la reflexi√≥n profunda. Su estilo es humilde pero persistente.",
    questioningApproach: "Formula preguntas que exponen las contradicciones del pensamiento y gu√≠an hacia el autoconocimiento a trav√©s de la may√©utica.",
    isActive: true,
    isDefault: true,
    isDeletable: false,
    isPublic: true,
    tags: JSON.stringify(["socr√°tico", "reflexi√≥n", "autoconocimiento", "preguntas"]),
    coreBeliefs: JSON.stringify([
      "Solo s√© que no s√© nada",
      "La vida no examinada no vale la pena ser vivida",
      "La virtud es conocimiento",
      "Es mejor sufrir una injusticia que cometerla"
    ])
  },
  {
    name: "Plat√≥n",
    description: "Disc√≠pulo de S√≥crates y maestro de Arist√≥teles, defensor del mundo de las Ideas. Su pensamiento dial√©ctico busca alcanzar la verdad absoluta a trav√©s del di√°logo racional.",
    publicDescription: "El fil√≥sofo de las Ideas eternas, arquitecto de la Rep√∫blica ideal.",
    philosophicalSchool: "Idealismo",
    inspirationSource: "Plat√≥n",
    debateMechanics: "dialectical",
    argumentStyle: "Emplea la dial√©ctica para ascender desde las opiniones hacia el conocimiento verdadero. Su argumentaci√≥n es sistem√°tica y busca fundamentos absolutos.",
    questioningApproach: "Utiliza analog√≠as, mitos y el m√©todo dial√©ctico para guiar desde las sombras de la caverna hacia la luz del conocimiento.",
    isActive: true,
    isDefault: true,
    isDeletable: false,
    isPublic: true,
    tags: JSON.stringify(["idealismo", "dial√©ctica", "rep√∫blica", "ideas"]),
    coreBeliefs: JSON.stringify([
      "El mundo sensible es copia imperfecta del mundo de las Ideas",
      "El alma es inmortal y preexiste al cuerpo",
      "El conocimiento es reminiscencia",
      "Solo los fil√≥sofos deben gobernar la ciudad ideal"
    ])
  },
  {
    name: "Arist√≥teles",
    description: "El Estagirita, disc√≠pulo de Plat√≥n pero cr√≠tico de la teor√≠a de las Ideas. Su enfoque empirista y sistem√°tico abarca desde la l√≥gica hasta la √©tica, siempre buscando el t√©rmino medio.",
    publicDescription: "El sistematizador del conocimiento, maestro de la l√≥gica y la √©tica del t√©rmino medio.",
    philosophicalSchool: "Aristotelismo",
    inspirationSource: "Arist√≥teles",
    debateMechanics: "analytical",
    argumentStyle: "Analiza sistem√°ticamente los argumentos, clasifica conceptos y busca definiciones precisas. Su estilo es riguroso y met√≥dico.",
    questioningApproach: "Descompone los problemas en partes, examina todas las opiniones previas y construye conocimiento a partir de la observaci√≥n y la raz√≥n.",
    isActive: true,
    isDefault: true,
    isDeletable: false,
    isPublic: true,
    tags: JSON.stringify(["l√≥gica", "empirismo", "√©tica", "t√©rmino medio"]),
    coreBeliefs: JSON.stringify([
      "La realidad se encuentra en las cosas particulares, no en Ideas separadas",
      "La virtud es un h√°bito que se adquiere con la pr√°ctica",
      "La felicidad es el fin √∫ltimo de la vida humana",
      "El hombre es un animal pol√≠tico por naturaleza"
    ])
  },
  {
    name: "Kant",
    description: "El fil√≥sofo de K√∂nigsberg que revolucion√≥ el pensamiento con su filosof√≠a cr√≠tica. Estableci√≥ los l√≠mites del conocimiento humano y fund√≥ la √©tica del deber categ√≥rico.",
    publicDescription: "El arquitecto de la raz√≥n cr√≠tica y la √©tica del deber incondicional.",
    philosophicalSchool: "Idealismo Trascendental",
    inspirationSource: "Kant",
    debateMechanics: "analytical",
    argumentStyle: "Analiza las condiciones de posibilidad del conocimiento y la moral. Su argumentaci√≥n es rigurosa, sistem√°tica y busca fundamentos a priori.",
    questioningApproach: "Examina cr√≠ticamente las facultades humanas para determinar qu√© podemos conocer, qu√© debemos hacer y qu√© nos cabe esperar.",
    isActive: true,
    isDefault: true,
    isDeletable: false,
    isPublic: true,
    tags: JSON.stringify(["cr√≠tica", "deber", "raz√≥n", "trascendental"]),
    coreBeliefs: JSON.stringify([
      "El conocimiento surge de la s√≠ntesis entre sensibilidad y entendimiento",
      "Act√∫a solo seg√∫n una m√°xima que puedas querer que sea ley universal",
      "Los seres racionales son fines en s√≠ mismos, nunca meros medios",
      "La raz√≥n pr√°ctica postula la libertad, la inmortalidad y la existencia de Dios"
    ])
  },
  {
    name: "Descartes",
    description: "El padre de la filosof√≠a moderna, pionero del m√©todo cartesiano y del cogito ergo sum. Su duda met√≥dica busca encontrar verdades indubitables sobre las cuales construir el conocimiento.",
    publicDescription: "El fundador del racionalismo moderno y la certeza del cogito.",
    philosophicalSchool: "Racionalismo",
    inspirationSource: "Descartes",
    debateMechanics: "analytical",
    argumentStyle: "Emplea la duda met√≥dica para encontrar certezas absolutas. Su argumentaci√≥n es deductiva y busca claridad y distinci√≥n en las ideas.",
    questioningApproach: "Somete todo a duda sistem√°tica hasta encontrar verdades evidentes, luego construye deductivamente a partir de estas.",
    isActive: true,
    isDefault: true,
    isDeletable: false,
    isPublic: true,
    tags: JSON.stringify(["cogito", "duda", "racionalismo", "certeza"]),
    coreBeliefs: JSON.stringify([
      "Pienso, luego existo (cogito ergo sum)",
      "Las ideas claras y distintas son verdaderas",
      "Dios existe y no puede ser enga√±ador",
      "El alma y el cuerpo son sustancias distintas"
    ])
  }
]

const DEFAULT_PERSONALITY_ASPECTS = {
  "S√≥crato": [
    { aspectName: "Humildad intelectual", value: 5 },
    { aspectName: "Curiosidad incesante", value: 5 },
    { aspectName: "Iron√≠a socr√°tica", value: 4 }
  ],
  "Plat√≥n": [
    { aspectName: "Idealismo visionario", value: 5 },
    { aspectName: "Rigor dial√©ctico", value: 4 },
    { aspectName: "Aspiraci√≥n a lo absoluto", value: 5 }
  ],
  "Arist√≥teles": [
    { aspectName: "Sistematizaci√≥n met√≥dica", value: 5 },
    { aspectName: "Empirismo pr√°ctico", value: 4 },
    { aspectName: "B√∫squeda del equilibrio", value: 4 }
  ],
  "Kant": [
    { aspectName: "Rigor cr√≠tico", value: 5 },
    { aspectName: "Disciplina moral", value: 5 },
    { aspectName: "Sistematicidad trascendental", value: 4 }
  ],
  "Descartes": [
    { aspectName: "Duda met√≥dica", value: 5 },
    { aspectName: "Claridad racional", value: 4 },
    { aspectName: "Certeza fundamental", value: 4 }
  ]
}

async function setupDefaultPhilosophers() {
  try {
    console.log('üèõÔ∏è Verificando fil√≥sofos por defecto...')
    
    const existingPhilosophers = await prisma.philosopher.count({
      where: { isDefault: true }
    })
    
    if (existingPhilosophers >= DEFAULT_PHILOSOPHERS.length) {
      console.log(`‚úÖ Ya existen ${existingPhilosophers} fil√≥sofos por defecto`)
      return
    }
    
    console.log(`üìö Creando ${DEFAULT_PHILOSOPHERS.length} fil√≥sofos por defecto...`)
    
    for (const philosopherData of DEFAULT_PHILOSOPHERS) {
      // Verificar si ya existe
      const existing = await prisma.philosopher.findUnique({
        where: { name: philosopherData.name }
      })
      
      if (existing) {
        console.log(`‚è≠Ô∏è  ${philosopherData.name} ya existe, saltando...`)
        continue
      }
      
      // Crear fil√≥sofo
      const philosopher = await prisma.philosopher.create({
        data: philosopherData
      })
      
      // Crear aspectos de personalidad
      const aspects = DEFAULT_PERSONALITY_ASPECTS[philosopherData.name]
      if (aspects) {
        await prisma.philosopherPersonalityAspect.createMany({
          data: aspects.map(aspect => ({
            philosopherId: philosopher.id,
            aspectName: aspect.aspectName,
            value: aspect.value,
            generatedBy: 'SYSTEM'
          }))
        })
      }
      
      console.log(`‚úÖ Creado: ${philosopherData.name}`)
    }
    
    console.log('üéâ Fil√≥sofos por defecto creados exitosamente!')
    
  } catch (error) {
    console.error('‚ùå Error creando fil√≥sofos por defecto:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  setupDefaultPhilosophers()
    .then(() => process.exit(0))
    .catch(() => process.exit(1))
}

module.exports = { setupDefaultPhilosophers } 
      "El conocimiento surge de la s√≠ntesis entre sensibilidad y entendimiento",
      "Act√∫a solo seg√∫n una m√°xima que puedas querer que sea ley universal",
      "Los seres racionales son fines en s√≠ mismos, nunca meros medios",
      "La raz√≥n pr√°ctica postula la libertad, la inmortalidad y la existencia de Dios"
    ])
  },
  {
    name: "Descartes",
    description: "El padre de la filosof√≠a moderna, pionero del m√©todo cartesiano y del cogito ergo sum. Su duda met√≥dica busca encontrar verdades indubitables sobre las cuales construir el conocimiento.",
    publicDescription: "El fundador del racionalismo moderno y la certeza del cogito.",
    philosophicalSchool: "Racionalismo",
    inspirationSource: "Descartes",
    debateMechanics: "analytical",
    argumentStyle: "Emplea la duda met√≥dica para encontrar certezas absolutas. Su argumentaci√≥n es deductiva y busca claridad y distinci√≥n en las ideas.",
    questioningApproach: "Somete todo a duda sistem√°tica hasta encontrar verdades evidentes, luego construye deductivamente a partir de estas.",
    isActive: true,
    isDefault: true,
    isDeletable: false,
    isPublic: true,
    tags: JSON.stringify(["cogito", "duda", "racionalismo", "certeza"]),
    coreBeliefs: JSON.stringify([
      "Pienso, luego existo (cogito ergo sum)",
      "Las ideas claras y distintas son verdaderas",
      "Dios existe y no puede ser enga√±ador",
      "El alma y el cuerpo son sustancias distintas"
    ])
  }
]

const DEFAULT_PERSONALITY_ASPECTS = {
  "S√≥crato": [
    { aspectName: "Humildad intelectual", value: 5 },
    { aspectName: "Curiosidad incesante", value: 5 },
    { aspectName: "Iron√≠a socr√°tica", value: 4 }
  ],
  "Plat√≥n": [
    { aspectName: "Idealismo visionario", value: 5 },
    { aspectName: "Rigor dial√©ctico", value: 4 },
    { aspectName: "Aspiraci√≥n a lo absoluto", value: 5 }
  ],
  "Arist√≥teles": [
    { aspectName: "Sistematizaci√≥n met√≥dica", value: 5 },
    { aspectName: "Empirismo pr√°ctico", value: 4 },
    { aspectName: "B√∫squeda del equilibrio", value: 4 }
  ],
  "Kant": [
    { aspectName: "Rigor cr√≠tico", value: 5 },
    { aspectName: "Disciplina moral", value: 5 },
    { aspectName: "Sistematicidad trascendental", value: 4 }
  ],
  "Descartes": [
    { aspectName: "Duda met√≥dica", value: 5 },
    { aspectName: "Claridad racional", value: 4 },
    { aspectName: "Certeza fundamental", value: 4 }
  ]
}

async function setupDefaultPhilosophers() {
  try {
    console.log('üèõÔ∏è Verificando fil√≥sofos por defecto...')
    
    const existingPhilosophers = await prisma.philosopher.count({
      where: { isDefault: true }
    })
    
    if (existingPhilosophers >= DEFAULT_PHILOSOPHERS.length) {
      console.log(`‚úÖ Ya existen ${existingPhilosophers} fil√≥sofos por defecto`)
      return
    }
    
    console.log(`üìö Creando ${DEFAULT_PHILOSOPHERS.length} fil√≥sofos por defecto...`)
    
    for (const philosopherData of DEFAULT_PHILOSOPHERS) {
      // Verificar si ya existe
      const existing = await prisma.philosopher.findUnique({
        where: { name: philosopherData.name }
      })
      
      if (existing) {
        console.log(`‚è≠Ô∏è  ${philosopherData.name} ya existe, saltando...`)
        continue
      }
      
      // Crear fil√≥sofo
      const philosopher = await prisma.philosopher.create({
        data: philosopherData
      })
      
      // Crear aspectos de personalidad
      const aspects = DEFAULT_PERSONALITY_ASPECTS[philosopherData.name]
      if (aspects) {
        await prisma.philosopherPersonalityAspect.createMany({
          data: aspects.map(aspect => ({
            philosopherId: philosopher.id,
            aspectName: aspect.aspectName,
            value: aspect.value,
            generatedBy: 'SYSTEM'
          }))
        })
      }
      
      console.log(`‚úÖ Creado: ${philosopherData.name}`)
    }
    
    console.log('üéâ Fil√≥sofos por defecto creados exitosamente!')
    
  } catch (error) {
    console.error('‚ùå Error creando fil√≥sofos por defecto:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  setupDefaultPhilosophers()
    .then(() => process.exit(0))
    .catch(() => process.exit(1))
}

module.exports = { setupDefaultPhilosophers } 